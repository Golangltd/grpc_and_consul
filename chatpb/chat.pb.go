// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

/*
Package chatpb is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	LoginRequest
	LoginReply
	SurfRequest
	SurfReply
	PingRequest
	PingReply
*/
package chatpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SurfReply_MessageType int32

const (
	SurfReply_CONNECT_SUCCESS SurfReply_MessageType = 0
	SurfReply_CHAT_CONTENT    SurfReply_MessageType = 1
)

var SurfReply_MessageType_name = map[int32]string{
	0: "CONNECT_SUCCESS",
	1: "CHAT_CONTENT",
}
var SurfReply_MessageType_value = map[string]int32{
	"CONNECT_SUCCESS": 0,
	"CHAT_CONTENT":    1,
}

func (x SurfReply_MessageType) String() string {
	return proto.EnumName(SurfReply_MessageType_name, int32(x))
}
func (SurfReply_MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type LoginReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Token   string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LoginReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SurfRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SurfRequest) Reset()                    { *m = SurfRequest{} }
func (m *SurfRequest) String() string            { return proto.CompactTextString(m) }
func (*SurfRequest) ProtoMessage()               {}
func (*SurfRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SurfRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SurfReply struct {
	Message     string                `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	MessageType SurfReply_MessageType `protobuf:"varint,2,opt,name=messageType,enum=chatpb.SurfReply_MessageType" json:"messageType,omitempty"`
}

func (m *SurfReply) Reset()                    { *m = SurfReply{} }
func (m *SurfReply) String() string            { return proto.CompactTextString(m) }
func (*SurfReply) ProtoMessage()               {}
func (*SurfReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SurfReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SurfReply) GetMessageType() SurfReply_MessageType {
	if m != nil {
		return m.MessageType
	}
	return SurfReply_CONNECT_SUCCESS
}

type PingRequest struct {
	TS int64 `protobuf:"varint,1,opt,name=TS" json:"TS,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PingRequest) GetTS() int64 {
	if m != nil {
		return m.TS
	}
	return 0
}

type PingReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PingReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "chatpb.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "chatpb.LoginReply")
	proto.RegisterType((*SurfRequest)(nil), "chatpb.SurfRequest")
	proto.RegisterType((*SurfReply)(nil), "chatpb.SurfReply")
	proto.RegisterType((*PingRequest)(nil), "chatpb.PingRequest")
	proto.RegisterType((*PingReply)(nil), "chatpb.PingReply")
	proto.RegisterEnum("chatpb.SurfReply_MessageType", SurfReply_MessageType_name, SurfReply_MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chater service

type ChaterClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	Surf(ctx context.Context, opts ...grpc.CallOption) (Chater_SurfClient, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type chaterClient struct {
	cc *grpc.ClientConn
}

func NewChaterClient(cc *grpc.ClientConn) ChaterClient {
	return &chaterClient{cc}
}

func (c *chaterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/chatpb.Chater/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaterClient) Surf(ctx context.Context, opts ...grpc.CallOption) (Chater_SurfClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chater_serviceDesc.Streams[0], c.cc, "/chatpb.Chater/Surf", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaterSurfClient{stream}
	return x, nil
}

type Chater_SurfClient interface {
	Send(*SurfRequest) error
	Recv() (*SurfReply, error)
	grpc.ClientStream
}

type chaterSurfClient struct {
	grpc.ClientStream
}

func (x *chaterSurfClient) Send(m *SurfRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chaterSurfClient) Recv() (*SurfReply, error) {
	m := new(SurfReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chaterClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/chatpb.Chater/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chater service

type ChaterServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Surf(Chater_SurfServer) error
	Ping(context.Context, *PingRequest) (*PingReply, error)
}

func RegisterChaterServer(s *grpc.Server, srv ChaterServer) {
	s.RegisterService(&_Chater_serviceDesc, srv)
}

func _Chater_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.Chater/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chater_Surf_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChaterServer).Surf(&chaterSurfServer{stream})
}

type Chater_SurfServer interface {
	Send(*SurfReply) error
	Recv() (*SurfRequest, error)
	grpc.ServerStream
}

type chaterSurfServer struct {
	grpc.ServerStream
}

func (x *chaterSurfServer) Send(m *SurfReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chaterSurfServer) Recv() (*SurfRequest, error) {
	m := new(SurfRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chater_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.Chater/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaterServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chater_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatpb.Chater",
	HandlerType: (*ChaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Chater_Login_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Chater_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Surf",
			Handler:       _Chater_Surf_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6b, 0xc2, 0x40,
	0x10, 0xc5, 0xb3, 0xfe, 0xab, 0x4e, 0xc4, 0xda, 0xd1, 0x43, 0x10, 0x04, 0x59, 0x28, 0x95, 0x1e,
	0x82, 0xa8, 0xf7, 0x52, 0x16, 0xa1, 0x87, 0x36, 0x96, 0x64, 0xdb, 0xab, 0x44, 0xd9, 0xaa, 0x54,
	0x93, 0x34, 0x9b, 0x1c, 0xfc, 0x2e, 0xbd, 0xf6, 0x7b, 0x96, 0x24, 0xae, 0x49, 0x5b, 0xea, 0x6d,
	0x5f, 0xe6, 0xbd, 0xe5, 0xf7, 0x26, 0x0b, 0xb0, 0xda, 0xb8, 0x91, 0x19, 0x84, 0x7e, 0xe4, 0x63,
	0x2d, 0x39, 0x07, 0x4b, 0x7a, 0x0b, 0xcd, 0x47, 0x7f, 0xbd, 0xf5, 0x6c, 0xf1, 0x11, 0x0b, 0x19,
	0x61, 0x0f, 0xea, 0xb1, 0x14, 0xa1, 0xe7, 0xee, 0x85, 0x41, 0x06, 0x64, 0xd8, 0xb0, 0x4f, 0x9a,
	0xbe, 0x02, 0x1c, 0xbd, 0xc1, 0xee, 0x80, 0x06, 0x5c, 0xec, 0x85, 0x94, 0xee, 0x5a, 0x19, 0x95,
	0x4c, 0x26, 0x32, 0x5e, 0xad, 0x84, 0x94, 0x46, 0x69, 0x40, 0x86, 0x75, 0x5b, 0x49, 0xec, 0x42,
	0x35, 0xf2, 0xdf, 0x85, 0x67, 0x94, 0xd3, 0x44, 0x26, 0xe8, 0x0d, 0xe8, 0x4e, 0x1c, 0xbe, 0x29,
	0x84, 0x7f, 0x2f, 0xa6, 0x9f, 0x04, 0x1a, 0x99, 0xf3, 0x3c, 0xc0, 0x1d, 0xe8, 0xc7, 0x23, 0x3f,
	0x04, 0x22, 0x85, 0x68, 0x8d, 0xfb, 0x66, 0x56, 0xd9, 0x3c, 0xdd, 0x60, 0x3e, 0xe5, 0x26, 0xbb,
	0x98, 0xa0, 0x53, 0xd0, 0x0b, 0x33, 0xec, 0xc0, 0x25, 0x9b, 0x5b, 0xd6, 0x8c, 0xf1, 0x85, 0xf3,
	0xc2, 0xd8, 0xcc, 0x71, 0xda, 0x1a, 0xb6, 0xa1, 0xc9, 0x1e, 0xee, 0xf9, 0x82, 0xcd, 0x2d, 0x3e,
	0xb3, 0x78, 0x9b, 0xd0, 0x3e, 0xe8, 0xcf, 0x5b, 0x6f, 0xad, 0x7a, 0xb4, 0xa0, 0xc4, 0x9d, 0x14,
	0xad, 0x6c, 0x97, 0xb8, 0x43, 0xaf, 0xa1, 0x91, 0x8d, 0xcf, 0xc2, 0x8f, 0xbf, 0x08, 0xd4, 0xd8,
	0xc6, 0x8d, 0x44, 0x88, 0x13, 0xa8, 0xa6, 0x0b, 0xc7, 0xae, 0x62, 0x2f, 0xfe, 0xab, 0x1e, 0xfe,
	0xfa, 0x1a, 0xec, 0x0e, 0x54, 0xc3, 0x29, 0x54, 0x92, 0x86, 0xd8, 0xf9, 0xd9, 0x37, 0x8b, 0x5c,
	0xfd, 0x59, 0x02, 0xd5, 0x86, 0x64, 0x44, 0x70, 0x04, 0x95, 0x04, 0x2e, 0x4f, 0x15, 0x9a, 0xe4,
	0xa9, 0x13, 0x3f, 0xd5, 0x96, 0xb5, 0xf4, 0x21, 0x4d, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x29,
	0x67, 0xa4, 0xab, 0x56, 0x02, 0x00, 0x00,
}
